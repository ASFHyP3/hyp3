name: Deploy HyP3
description: Deploy a HyP3 stack

inputs:
  TEMPLATE_BUCKET:
    description: "S3 Bucket for CloudFormation deployment artifacts"
    required: true
  STACK_NAME:
    description: "Name of the deployed stack"
    required: true
  DOMAIN_NAME:
    description: "HyP3 API domain name"
    required: true
  CERTIFICATE_ARN:
    description: "ARN for AWS Certificate Manager SSL certificate"
    required: true
  IMAGE_TAG:
    description: "HyP3 plugin docker image tag to pull"
    required: true
  VPC_ID:
    description: "Default VPC ID"
    required: true
  SUBNET_IDS:
    description: "Comma separated list of Subnet IDs"
    required: true
  EDL_USERNAME:
    description: "EarthData Login name to use when downloading data from ASF"
    required: true
  EDL_PASSWORD:
    description: "EarthData Login password to use when downloading data from ASF"
    required: true
  CLOUDFORMATION_ROLE_ARN:
    description: "The CloudFormation role to use for this deployment"
    required: true
  MONTHLY_JOB_QUOTA_PER_USER:
    description: "The default number of jobs any user with an Earthdata Login can run per month"
    required: true
  AUTORIFT_IMAGE:
    description: "HyP3 AutoRIFT plugin container image to pull"
    required: true
  AUTORIFT_NAMING_SCHEME:
    description: "Naming scheme for autoRIFT products, On Demand (ITS_LIVE_OD) or Production (ITS_LIVE_PROD)"
    required: true
  AUTORIFT_PARAMETER_FILE:
    description: "Naming scheme for autoRIFT products, On Demand (ITS_LIVE_OD) or Production (ITS_LIVE_PROD)"
    required: true
  BANNED_CIDR_BLOCKS:
    description: "Comma separated list of IP CIDR blocks that will receive HTTP 403 FORBIDDEN responses from the API"
    required: true
  AMI_ID:
    description: "Amazon Linux 2 ECS-optimized AMI id to use when running AWS Batch jobs"
    required: true

runs:
  using: "composite"
  steps:
      - name: install dependancies and render templates
        shell: bash
        run: |
          pip install --upgrade pip
          pip install -r requirements-all.txt
          python apps/render_cf.py
          pip install -r apps/api/requirements-api.txt -t apps/api/src
          pip install -r apps/process-new-granules/requirements-process-new-granules.txt -t apps/process-new-granules/src
          pip install -r apps/update-db/update-db-requirements.txt -t apps/update-db/src
          pip install -r apps/start-execution/start-execution-requirements.txt -t apps/start-execution/src
      - name: Package and deploy
        shell: bash
        run: |
          aws cloudformation package \
            --template-file apps/main-cf.yml \
            --s3-bucket ${{ inputs.TEMPLATE_BUCKET }} \
            --output-template-file packaged.yml
          aws cloudformation deploy \
            --stack-name ${{ inputs.STACK_NAME }} \
            --template-file packaged.yml \
            --role-arn ${{ inputs.CLOUDFORMATION_ROLE_ARN }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
                VpcId='${{ inputs.VPC_ID }}' \
                SubnetIds='${{ inputs.SUBNET_IDS }}' \
                EDLUsername='${{ inputs.EDL_USERNAME }}' \
                EDLPassword='${{ inputs.EDL_PASSWORD }}' \
                ImageTag='${{ inputs.IMAGE_TAG }}' \
                DomainName='${{ inputs.DOMAIN_NAME }}' \
                CertificateArn='${{ inputs.CERTIFICATE_ARN }}' \
                MonthlyJobQuotaPerUser='${{ inputs.MONTHLY_JOB_QUOTA_PER_USER }}' \
                AutoriftImage='${{ inputs.AUTORIFT_IMAGE }}' \
                AutoriftNamingScheme='${{ inputs.AUTORIFT_NAMING_SCHEME }}' \
                AutoriftParameterFile='${{ inputs.AUTORIFT_PARAMETER_FILE }}' \
                BannedCidrBlocks='${{ inputs.BANNED_CIDR_BLOCKS }}' \
                AmiId='${{ inputs.AMI_ID }}'
