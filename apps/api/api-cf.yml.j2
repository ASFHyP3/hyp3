Parameters:

  JobsTable:
    Type: String

  UsersTable:
    Type: String

  SubscriptionsTable:
    Type: String

  AuthPublicKey:
    Type: String

  AuthAlgorithm:
    Type: String

  DomainName:
    Type: String

  CertificateArn:
    Type: String

  MonthlyJobQuotaPerUser:
    Type: Number

  SystemAvailable:
    Type: String

  BannedCidrBlocks:
    Type: String

  PermissionsBoundaryPolicyArn:
    Type: String

  SecurityGroupId:
    Type: String

  SubnetIds:
    Type: CommaDelimitedList

Conditions:

  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundaryPolicyArn, ""]]

  LambdasInVpc: !Not [!Equals [!Ref SecurityGroupId, ""]]

  UseCustomDomainName: !Not [!Equals [!Ref DomainName, ""]]

Outputs:

  Url:
    Value: !If [UseCustomDomainName, !Sub "https://${CustomDomainName}/ui", !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/ui"]

  ApiId:
    Value: !Ref RestApi

Resources:

  AccountLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: apigateway.amazonaws.com
          Effect: Allow
      PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundaryPolicyArn, !Ref AWS::NoValue]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  AccountLogging:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt AccountLoggingRole.Arn

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        openapi: 3.0.3
        paths:
          /:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
                httpMethod: POST
          /{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
                httpMethod: POST

  {% set random_id = range(1, 999999) | random %}
  Deployment{{ random_id }}:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: api
      RestApiId: !Ref RestApi
      DeploymentId: !Ref Deployment{{ random_id }}
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{"sourceIp":"$context.identity.sourceIp","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","responseLength":"$context.responseLength","responseLatency":"$context.responseLatency","requestTime":"$context.requestTime","protocol":"$context.protocol","userAgent":"$context.identity.userAgent","requestId":"$context.requestId"}'

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 180

  CustomDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: UseCustomDomainName
    Properties:
      DomainName: !Ref DomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateArn
          EndpointType: REGIONAL

  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: UseCustomDomainName
    Properties:
      ApiId: !Ref RestApi
      DomainName: !Ref CustomDomainName
      Stage: !Ref Stage

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundaryPolicyArn, !Ref AWS::NoValue]
      ManagedPolicyArns:
        - !If [LambdasInVpc, arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole, !Ref AWS::NoValue]
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:GetItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${JobsTable}*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UsersTable}*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionsTable}*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          USERS_TABLE_NAME: !Ref UsersTable
          SUBSCRIPTIONS_TABLE_NAME: !Ref SubscriptionsTable
          AUTH_PUBLIC_KEY: !Ref AuthPublicKey
          AUTH_ALGORITHM: !Ref AuthAlgorithm
          MONTHLY_JOB_QUOTA_PER_USER: !Ref MonthlyJobQuotaPerUser
          SYSTEM_AVAILABLE: !Ref SystemAvailable
          BANNED_CIDR_BLOCKS: !Ref BannedCidrBlocks
      Code: src/
      Handler: hyp3_api.lambda_handler.handler
      MemorySize: 3008
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 30
      VpcConfig:
        !If
          - LambdasInVpc
          - SecurityGroupIds:
              - !Ref SecurityGroupId
            SubnetIds: !Ref SubnetIds
          - !Ref AWS::NoValue

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"
