AWSTemplateFormatVersion: 2010-09-09

Parameters:

  JobsTable:
    Type: String

  StepFunctionArn:
    Type: String

  PermissionsBoundaryPolicyArn:
    Type: String

  SecurityGroupId:
    Type: String

  SubnetIds:
    Type: CommaDelimitedList

Conditions:

  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundaryPolicyArn, ""]]

  LambdasInVpc: !Not [!Equals [!Ref SecurityGroupId, ""]]

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90

  Role:
    Type: {{ 'Custom::JplRole' if security_environment == 'JPL' else 'AWS::IAM::Role' }}
    Properties:
      {% if security_environment == 'JPL' %}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundaryPolicyArn, !Ref AWS::NoValue]
      ManagedPolicyArns:
        - !If [LambdasInVpc, arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole, !Ref AWS::NoValue]
        - !Ref Policy

  Policy:
    Type: {{ 'Custom::JplPolicy' if security_environment == 'JPL' else 'AWS::IAM::ManagedPolicy' }}
    Properties:
      {% if security_environment == 'JPL' %}
      ServiceToken: !ImportValue Custom::JplPolicy::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          - Effect: Allow
            Action: dynamodb:Query
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${JobsTable}*"
          - Effect: Allow
            Action: states:StartExecution
            Resource: !Ref StepFunctionArn

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          STEP_FUNCTION_ARN: !Ref StepFunctionArn
      Code: src/
      Handler: start_execution.lambda_handler
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python3.8
      Timeout: 45
      VpcConfig:
        !If
          - LambdasInVpc
          - SecurityGroupIds:
              - !Ref SecurityGroupId
            SubnetIds: !Ref SubnetIds
          - !Ref AWS::NoValue

  EventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref Lambda
      Qualifier: $LATEST
      MaximumRetryAttempts: 0

  Schedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(1 minute)"
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: lambda

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Schedule.Arn
