{
  "StartAt": "SET_DEFAULT_RESULTS",
  "States": {
    "SET_DEFAULT_RESULTS": {
      "Type": "Pass",
      "Result": {
        "get_files": {
          "logs": [],
          "expiration_time": null
        },
        "processing_failed": false
      },
      "ResultPath": "$.results",
      "Next": "EXECUTION_STARTED"
    },
    "EXECUTION_STARTED": {
      "Type": "Task",
      "Resource": "${UpdateDBLambdaArn}",
      "Parameters": {
        "job_id.$": "$.job_id",
        "execution_started": true
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "ResultPath": "$.results.execution_started",
      "Next": "SEARCH_ARCHIVE"
    },
    "SEARCH_ARCHIVE": {
      "Type": "Task",
      "Resource": "${SearchArchiveLambdaArn}",
      "Parameters": {
        "job_type.$": "$.job_type",
        "job_parameters.$": "$.job_parameters",
        "user_id.$": "$.user_id"
      },
      {# TODO: fine-tune retry logic #}
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "JOB_FAILED",
          "ResultPath": "$.exists_in_archive"
        }
      ],
      "ResultPath": "$.exists_in_archive",
      "Next": "CHECK_IF_ARCHIVED"
    },
    "CHECK_IF_ARCHIVED": {
      "Type" : "Choice",
      "Choices": [
        {
          "Variable": "$.exists_in_archive",
          "BooleanEquals": true,
          "Next": "JOB_ARCHIVED"
        }
      ],
      "Default": "SET_BATCH_OVERRIDES"
    },
    "JOB_ARCHIVED": {
      "Type": "Succeed"
    },
    "SET_BATCH_OVERRIDES": {
      "Type": "Task",
      "Resource": "${SetBatchOverridesLambdaArn}",
      "Parameters": {
        "job_type.$": "$.job_type",
        "job_parameters.$": "$.job_parameters"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "JOB_FAILED",
          "ResultPath": "$.container_overrides"
        }
      ],
      "ResultPath": "$.container_overrides",
      "Next": "INSPECT_JOB_TYPE"
    },
    "INSPECT_JOB_TYPE": {
      "Type": "Choice",
      "Choices": [
        {% for job_type, job_spec in job_types.items() %}
        {
          "Variable": "$.job_type",
          "StringEquals": "{{ job_type }}",
          "Next": "{{ job_spec['steps'][0]['name'] }}"
        }{% if not loop.last %},{% endif %}
        {% endfor %}
      ],
      "Default": "JOB_FAILED"
    },
    {% for name, body in job_states.items() %}
    "{{ name }}": {{ json.dumps(body) }},
    {% endfor %}
    "PROCESSING_FAILED": {
      "Type": "Pass",
      "Result": true,
      "ResultPath": "$.results.processing_failed",
      "Next": "UPLOAD_LOG"
    },
    "UPLOAD_LOG":{
      "Type": "Task",
      "Resource": "${UploadLogLambdaArn}",
      "Parameters": {
        "prefix.$": "$.job_id",
        "log_group": "/aws/batch/job",
        "processing_results.$": "$.results.processing_results"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "JOB_FAILED",
          "ResultPath": "$.results.upload_log"
        }
      ],
      "ResultPath": "$.results.upload_log",
      "Next": "GET_FILES"
    },
    "GET_FILES": {
      "Type": "Task",
      "Resource": "${GetFilesLambdaArn}",
      "Parameters": {
        "job_id.$": "$.job_id"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "JOB_FAILED",
          "ResultPath": "$.results.get_files_error"
        }
      ],
      "ResultPath": "$.results.get_files",
      "Next": "CHECK_PROCESSING_TIME"
    },
    "CHECK_PROCESSING_TIME": {
      "Type": "Task",
      "Resource": "${CheckProcessingTimeLambdaArn}",
      "Parameters": {
        "processing_results.$": "$.results.processing_results"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "JOB_FAILED",
          "ResultPath": "$.results.check_processing_time_error"
        }
      ],
      "ResultPath": "$.results.processing_times",
      "Next": "CHECK_STATUS"
    },
    "CHECK_STATUS": {
      "Type" : "Choice",
      "Choices": [{
        "Variable": "$.results.processing_failed",
        "BooleanEquals": true,
        "Next": "JOB_FAILED"
      }],
      "Default": "JOB_SUCCEEDED"
    },
    "JOB_SUCCEEDED": {
      "Type": "Task",
      "Resource": "${UpdateDBLambdaArn}",
      "Parameters": {
        "job_id.$": "$.job_id",
        "status_code": "SUCCEEDED",
        "processing_times.$": "$.results.processing_times"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "ResultPath": "$.results.job_succeeded",
      "End": true
    },
    "JOB_FAILED": {
      "Type": "Task",
      "Resource": "${UpdateDBLambdaArn}",
      "Parameters": {
        "job_id.$": "$.job_id",
        "status_code": "FAILED",
        "processing_times": null
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "ResultPath": "$.results.job_failed",
      "Next": "FAIL"
    },
    "FAIL": {
      "Type": "Fail"
    }
  }
}
