{
  "StartAt": "SET_DEFAULT_RESULTS",
  "States": {
    "SET_DEFAULT_RESULTS": {
      "Type": "Pass",
      "Result": {
        "processing_times": [],
        "get_files": {
          "logs": [],
          "expiration_time": null
        },
        "processing_failed": false
      },
      "ResultPath": "$.results",
      "Next": "EXECUTION_STARTED"
    },
    "EXECUTION_STARTED": {
      "Type": "Task",
      "Resource": "${UpdateDBLambdaArn}",
      "Parameters": {
        "job_id.$": "$.job_id",
        "execution_started": true
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "ResultPath": "$.results.execution_started",
      "Next": "ADD_PREFIX_TO_JOB_PARAMETERS"
    },
    "ADD_PREFIX_TO_JOB_PARAMETERS": {
      "Type": "Pass",
      "InputPath": "$.job_id",
      "ResultPath": "$.job_parameters.bucket_prefix",
      "Next": "INSPECT_MEMORY_REQUIREMENTS"
    },
    "INSPECT_MEMORY_REQUIREMENTS": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.job_type",
              "StringEquals": "AUTORIFT"
            },
            {
              "Variable": "$.job_parameters.granules",
              "StringMatches": "S2*"
            }
          ],
          "Next": "USE_SENTINEL2_MEMORY"
        },
        {
          "And": [
            {
              "Variable": "$.job_type",
              "StringEquals": "AUTORIFT"
            },
            {
              "Variable": "$.job_parameters.granules",
              "StringMatches": "L*"
            }
          ],
          "Next": "USE_LANDSAT_MEMORY"
        },
        {
          "And": [
            {
              "Variable": "$.job_type",
              "StringEquals": "RTC_GAMMA"
            },
            {
              "Variable": "$.job_parameters.resolution",
              "IsPresent": true
            },
            {
              "Or": [
                {
                  "Variable": "$.job_parameters.resolution",
                  "StringEquals": "10"
                },
                {
                  "Variable": "$.job_parameters.resolution",
                  "StringEquals": "20"
                }
              ]
            }
          ],
          "Next": "USE_10M_RTC_MEMORY"
        },
        {
          "And": [
            {
              "Or": [
                {
                  "Variable": "$.job_type",
                  "StringEquals": "WATER_MAP"
                },
                {
                  "Variable": "$.job_type",
                  "StringEquals": "WATER_MAP_EQ"
                },
                {
                  "Variable": "$.job_type",
                  "StringEquals": "WATER_MAP_TEST"
                }
              ]
            },
            {
              "Variable": "$.job_parameters.resolution",
              "IsPresent": true
            },
            {
              "Or": [
                {
                  "Variable": "$.job_parameters.resolution",
                  "StringEquals": "10"
                },
                {
                  "Variable": "$.job_parameters.resolution",
                  "StringEquals": "20"
                }
              ]
            }
          ],
          "Next": "USE_10M_WATER_MAP_MEMORY"
        }
      ],
      "Default": "USE_DEFAULT_MEMORY"
    },
    "USE_SENTINEL2_MEMORY": {
      "Type": "Pass",
      "Result": {
        "ResourceRequirements": [
          {
            "Type": "MEMORY",
            "Value": "7900"
          }
        ]
      },
      "ResultPath": "$.container_overrides",
      "Next": "INSPECT_JOB_TYPE"
    },
    "USE_LANDSAT_MEMORY": {
      "Type": "Pass",
      "Result": {
        "ResourceRequirements": [
          {
            "Type": "MEMORY",
            "Value": "15750"
          }
        ]
      },
      "ResultPath": "$.container_overrides",
      "Next": "INSPECT_JOB_TYPE"
    },
    "USE_10M_RTC_MEMORY": {
      "Type": "Pass",
      "Result": {
        "ResourceRequirements": [
          {
            "Type": "MEMORY",
            "Value": "63200"
          }
        ]
      },
      "ResultPath": "$.container_overrides",
      "Next": "INSPECT_JOB_TYPE"
    },
    "USE_10M_WATER_MAP_MEMORY": {
      "Type": "Pass",
      "Result": {
        "ResourceRequirements": [
          {
            "Type": "MEMORY",
            "Value": "126000"
          }
        ]
      },
      "ResultPath": "$.container_overrides",
      "Next": "INSPECT_JOB_TYPE"
    },
    "USE_DEFAULT_MEMORY": {
      "Type": "Pass",
      "Result": {},
      "ResultPath": "$.container_overrides",
      "Next": "INSPECT_JOB_TYPE"
    },
    "INSPECT_JOB_TYPE": {
      "Type": "Choice",
      "Choices": [
        {% for job_type, job_spec in job_types.items() %}
        {
          "Variable": "$.job_type",
          "StringEquals": "{{ job_type }}",
          "Next": "{{ job_spec['tasks'][0]['name'] }}"
        }{% if not loop.last %},{% endif %}
        {% endfor %}
      ],
      "Default": "JOB_FAILED"
    },
    {% for job_type, job_spec in job_types.items() %}
    {% for task in job_spec['tasks'] %}
    "{{ task['name'] }}": {
      "Type": "Task",
      "Resource": "arn:aws:states:::batch:submitJob.sync",
      "Parameters": {
        "JobDefinition": "{{ '${'+ snake_to_pascal_case(task['name']) + '}' }}",
        "JobName.$": "$.job_id",
        "JobQueue": "${JobQueueArn}",
        "ShareIdentifier": "default",
        "SchedulingPriorityOverride.$": "$.priority",
        "Parameters.$": "$.job_parameters",
        "ContainerOverrides.$": "$.container_overrides",
        "RetryStrategy": {
          "Attempts": 3
        }
      },
      "ResultPath": "$.results.processing_results.step_{{ loop.index0 }}",
      "Next": "{% if not loop.last %}{{ loop.nextitem['name'] }}{% else %}GET_FILES{% endif %}",
      "Retry": [
        {
          "ErrorEquals": [
            "Batch.ServerException",
            "Batch.AWSBatchException"
          ],
          "MaxAttempts": 2
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "PROCESSING_FAILED",
          "ResultPath": "$.results.processing_results.step_{{ loop.index0 }}"
        }
      ]
    },
    {% endfor %}
    {% endfor %}
    "PROCESSING_FAILED": {
      "Type": "Pass",
      "Result": true,
      "ResultPath": "$.results.processing_failed",
      "Next": "UPLOAD_LOG"
    },
    "UPLOAD_LOG":{
      "Type": "Task",
      "Resource": "${UploadLogLambdaArn}",
      "Parameters": {
        "prefix.$": "$.job_id",
        "log_group": "/aws/batch/job",
        "processing_results.$": "$.results.processing_results"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "JOB_FAILED",
          "ResultPath": "$.results.upload_log"
        }
      ],
      "ResultPath": "$.results.upload_log",
      "Next": "GET_FILES"
    },
    "GET_FILES": {
      "Type": "Task",
      "Resource": "${GetFilesLambdaArn}",
      "Parameters": {
        "job_id.$": "$.job_id"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "JOB_FAILED",
          "ResultPath": "$.results.get_files_error"
        }
      ],
      "ResultPath": "$.results.get_files",
      "Next": "CHECK_PROCESSING_TIME"
    },
    "CHECK_PROCESSING_TIME": {
      "Type": "Task",
      "Resource": "${CheckProcessingTimeLambdaArn}",
      "Parameters": {
        "processing_results.$": "$.results.processing_results"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "JOB_FAILED",
          "ResultPath": "$.results.check_processing_time_error"
        }
      ],
      "ResultPath": "$.results.processing_times",
      "Next": "CHECK_STATUS"
    },
    "CHECK_STATUS": {
      "Type" : "Choice",
      "Choices": [{
        "Variable": "$.results.processing_failed",
        "BooleanEquals": true,
        "Next": "JOB_FAILED"
      }],
      "Default": "JOB_SUCCEEDED"
    },
    "JOB_SUCCEEDED": {
      "Type": "Task",
      "Resource": "${UpdateDBLambdaArn}",
      "Parameters": {
        "job_id.$": "$.job_id",
        "status_code": "SUCCEEDED",
        "files.$": "$.results.get_files.files",
        "browse_images.$": "$.results.get_files.browse_images",
        "thumbnail_images.$": "$.results.get_files.thumbnail_images",
        "logs.$": "$.results.get_files.logs",
        "expiration_time.$": "$.results.get_files.expiration_time",
        "processing_times.$": "$.results.processing_times"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "ResultPath": "$.results.job_succeeded",
      "End": true
    },
    "JOB_FAILED": {
      "Type": "Task",
      "Resource": "${UpdateDBLambdaArn}",
      "Parameters": {
        "job_id.$": "$.job_id",
        "status_code": "FAILED",
        "logs.$": "$.results.get_files.logs",
        "expiration_time.$": "$.results.get_files.expiration_time",
        "processing_times.$": "$.results.processing_times"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 2
        }
      ],
      "ResultPath": "$.results.job_failed",
      "Next": "FAIL"
    },
    "FAIL": {
      "Type": "Fail"
    }
  }
}
