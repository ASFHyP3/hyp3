AWSTemplateFormatVersion: 2010-09-09

Parameters:

  JobQueueArn:
    Type: String

  {% for job_type, job_spec in job_types.items() if 'Default' != job_spec['compute_environment']['name'] %}
  {{ job_spec['compute_environment']['name'] }}JobQueueArn:
    Type: String
  {% endfor %}

  JobsTable:
    Type: String

  {% if security_environment == 'EDC' %}
  SecurityGroupId:
    Type: String

  SubnetIds:
    Type: CommaDelimitedList
  {% endif %}

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90

  Role:
    Type: {{ 'Custom::JplRole' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::Role' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      ManagedPolicyArns:
        - !Ref Policy
        {% if security_environment == 'EDC' %}
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        {% endif %}

  Policy:
    Type: {{ 'Custom::JplPolicy' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::ManagedPolicy' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplPolicy::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${JobsTable}*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
      Code: src/
      Handler: handle_batch_event.lambda_handler
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python3.9
      Timeout: 30
      {% if security_environment == 'EDC' %}
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      {% endif %}

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.batch
        detail-type:
          - Batch Job State Change
        detail:
          jobQueue:
            - !Ref JobQueueArn
            {% for job_type, job_spec in job_types.items() if 'Default' != job_spec['compute_environment']['name'] %}
            - !Ref {{ job_spec['compute_environment']['name'] }}JobQueueArn
            {% endfor %}
          status:
            - RUNNING
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: lambda-target

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRule.Arn
