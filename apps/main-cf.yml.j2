AWSTemplateFormatVersion: 2010-09-09

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  EDLUsername:
    Description: Earthdata Login username to use when downloading input products.
    Type: String

  EDLPassword:
    Description: Earthdata Login password to use when downloading input products.
    Type: String
    NoEcho: true

  ImageTag:
    Type: String
    Default: latest

  ProductLifetimeInDays:
    Description: Number of days to keep output files before deleting them.
    Type: Number
    MinValue: 1
    Default: 14

  AuthPublicKey:
    Description: Public key for jwt auth provider, if using https://auth.asf.alaska.edu then keep default.
    Type: String
    Default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDBU3T16Db/88XQ2MTHgm9uFALjSJAMSejmVL+tO0ILzHw2OosKlVb38urmIGQ+xMPXTs1AQQYpJ/CdO7TaJ51pv4iz+zF0DYeUhPczsBEQYisLMZUwedPm9QLoKu8dkt4EzMiatQimBmzDvxxRkAIDehYh468phR6zPqIDizbgAjD4qgTd+oSA9mDPBZ/oG1sVc7TcoP93FbO9u1frzhjf0LS1H7YReVP4XsUTpCN0FsxDAMfLpOYZylChkFQeay7n9CIK8em4W4JL/T0PC218jXpF7W2p92rfAQztiWlFJc66tt45SXAVtD1rMEdWGlzze4acjMn4P7mugHHb17igtlF82H/wpdm84qTPShvBp/F4YZejgAzOAxzKVbCQ8lrApk1XYVDRAVk3AphfvNK5IC/X9zDSXstH9U94z8BTjkL2fR4eKzFu5kkvVoGHAACIv72QvH06Vwd0PNzLyaNXr9D5jO61EbR4RfpbzvAG0IzgXsUq0Rj7qwvzTCu6yLwTi/fn9bmRaOQNPtBch4ai5w7cfUWe2r7ZPv31AXPm1A+aGXvYTEZkiQMrBN/dXlNdUmafNNDoMBm/frQhMl+2DZp+C9GXCr2Z/JmYUHO8PaEj6UyYTkkrmtZNlZ43Nd2TblPEzL0pprJM9MxEf2Peaai8GKmTJz6C5tSGU+XdZQ== root@9dce6b43747e

  AuthAlgorithm:
    Description: Algorithm for jwt auth provider, if using https://auth.asf.alaska.edu then keep default.
    Type: String
    Default: RS256

  MonthlyJobQuotaPerUser:
    Description: Number of jobs each user is allowed per month.
    Type: Number
    MinValue: 0

  SystemAvailable:
    Description: Set to false to shutdown system, API will run and provide errors to users, but will not accept jobs.
    Type: String
    Default: true
    AllowedValues:
      - false
      - true

  BannedCidrBlocks:
    Description: Comma separated list of IP CIDR blocks that will receive HTTP 403 FORBIDDEN responses from the API
    Type: String
    Default: ""

  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  DefaultMaxvCpus:
    Description: Default maximum size for the AWS Batch compute environment
    Type: Number
    MinValue: 0
    Default: 60

  ExpandedMaxvCpus:
    Description: Expanded maximum size for the AWS Batch compute environment to use when month-to-date budget sufficiently exceeds month-to-date spending
    Type: Number
    MinValue: 0
    Default: 60

  MonthlyComputeBudget:
    Description: Total budget allocated for AWS Batch processing per month, in dollars. Ignored when DefaultMaxvCpus = ExpandedMaxvCpus.
    Type: Number
    MinValue: 0
    Default: 0

  RequiredSurplus:
    Description: Amount by which month-to-date budget must exceed month-to-date spending to increase fleet size, in dollars. Ignored when DefaultMaxvCpus = ExpandedMaxvCpus.
    Type: Number
    MinValue: 0
    Default: 0

  InstanceTypes:
    Description: EC2 instance types to include in AWS Batch Compute Environment
    Type: CommaDelimitedList
    Default: r5d.xlarge

  {% if security_environment != 'EDC' %}
  DomainName:
    Description: DNS domain name that will be used to invoke this api.
    Type: String

  CertificateArn:
    Description: ARN of Certificate in AWS Certificate Manager setup previously for this domain name.
    Type: String

  {% else %}
  PermissionsBoundaryPolicyArn:
    Type: String

  OriginAccessIdentityId:
    Description: ID of the CloudFront Origin Access Identity used to access data in S3 for Earthdata Cloud deployments
    Type: String

  DistributionUrl:
    Type: String
    Description: CloudFront Distribution URL for Earthdata Cloud environments
  {% endif %}

Conditions:

  ScaleCluster: !Not [!Equals [!Ref DefaultMaxvCpus, !Ref ExpandedMaxvCpus]]

Outputs:

  ApiUrl:
    Value: !GetAtt Api.Outputs.Url

Resources:

  Api:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobsTable: !Ref JobsTable
        UsersTable: !Ref UsersTable
        SubscriptionsTable: !Ref SubscriptionsTable
        AuthPublicKey: !Ref AuthPublicKey
        AuthAlgorithm: !Ref AuthAlgorithm
        MonthlyJobQuotaPerUser: !Ref MonthlyJobQuotaPerUser
        SystemAvailable: !Ref SystemAvailable
        BannedCidrBlocks: !Ref BannedCidrBlocks
        {% if security_environment == 'EDC' %}
        PermissionsBoundaryPolicyArn: !Ref PermissionsBoundaryPolicyArn
        VpcId: !Ref VpcId
        SecurityGroupId: !GetAtt Cluster.Outputs.SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% else %}
        DomainName: !Ref DomainName
        CertificateArn: !Ref CertificateArn
        {% endif %}
      TemplateURL: api/api-cf.yml

  Cluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !Ref VpcId
        SubnetIds: !Join [",", !Ref SubnetIds]
        MaxvCpus: !Ref DefaultMaxvCpus
        AmiId: !Ref AmiId
        ContentBucket: !Ref ContentBucket
        InstanceTypes: !Join [",", !Ref InstanceTypes]
        {% if security_environment == 'EDC' %}
        PermissionsBoundaryPolicyArn: !Ref PermissionsBoundaryPolicyArn
        {% endif %}
      TemplateURL: compute-cf.yml

  ScaleCluster:
    Type: AWS::CloudFormation::Stack
    Condition: ScaleCluster
    Properties:
      Parameters:
        ComputeEnvironmentArn: !GetAtt Cluster.Outputs.ComputeEnvironmentArn
        DefaultMaxvCpus: !Ref DefaultMaxvCpus
        ExpandedMaxvCpus: !Ref ExpandedMaxvCpus
        MonthlyComputeBudget: !Ref MonthlyComputeBudget
        RequiredSurplus: !Ref RequiredSurplus
        {% if security_environment == 'EDC' %}
        PermissionsBoundaryPolicyArn: !Ref PermissionsBoundaryPolicyArn
        SecurityGroupId: !GetAtt Cluster.Outputs.SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% endif %}
      TemplateURL: scale-cluster/scale-cluster-cf.yml

  ProcessNewGranules:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobsTable: !Ref JobsTable
        UsersTable: !Ref UsersTable
        SubscriptionsTable: !Ref SubscriptionsTable
        MonthlyJobQuotaPerUser: !Ref MonthlyJobQuotaPerUser
        {% if security_environment == 'EDC' %}
        PermissionsBoundaryPolicyArn: !Ref PermissionsBoundaryPolicyArn
        SecurityGroupId: !GetAtt Cluster.Outputs.SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% endif %}
      TemplateURL: process-new-granules/process-new-granules-cf.yml

  StepFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobQueueArn: !GetAtt Cluster.Outputs.JobQueueArn
        TaskRoleArn: !GetAtt Cluster.Outputs.TaskRoleArn
        JobsTable: !Ref JobsTable
        Bucket: !Ref ContentBucket
        ImageTag: !Ref ImageTag
        SecretArn: !Ref Secret
        {% if security_environment == 'EDC' %}
        PermissionsBoundaryPolicyArn: !Ref PermissionsBoundaryPolicyArn
        SecurityGroupId: !GetAtt Cluster.Outputs.SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        DistributionUrl: !Ref DistributionUrl
        {% endif %}
      TemplateURL: workflow-cf.yml

  Monitoring:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StepFunctionArn: !GetAtt StepFunction.Outputs.StepFunctionArn
        ApiId: !GetAtt Api.Outputs.ApiId
      TemplateURL: monitoring-cf.yml

  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        IgnorePublicAcls: True
        BlockPublicPolicy: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "${LogBucket.Arn}/*"
            Condition:
              ArnLike:
                "aws:SourceArn": !GetAtt ContentBucket.Arn
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId

  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: s3-access-logs/content-bucket/
      MetricsConfigurations:
        - Id: EntireBucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        IgnorePublicAcls: True
        BlockPublicPolicy: {{ 'True' if security_environment == 'EDC' else 'False' }}
        RestrictPublicBuckets: {{ 'True' if security_environment == 'EDC' else 'False' }}
      LifecycleConfiguration:
        Rules:
        {% if lifecycle_policy %}
          - Status: Enabled
            TagFilters:
              - Key: file_type
                Value: product
            ExpirationInDays: !Ref ProductLifetimeInDays
          - Status: Enabled
            TagFilters:
              - Key: file_type
                Value: log
            ExpirationInDays: !Ref ProductLifetimeInDays
        {% endif %}
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - "*.asf.alaska.edu"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

  {% if security_environment != 'JPL' %}
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ContentBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            {% if security_environment == 'EDC' %}
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentityId}"
            {% else %}
            Principal: "*"
            {% endif %}
            Action:
              - s3:GetObject
              - s3:GetObjectTagging
            Resource: !Sub "${ContentBucket.Arn}/*"
          - Effect: Allow
            {% if security_environment == 'EDC' %}
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentityId}"
            {% else %}
            Principal: "*"
            {% endif %}
            Action: s3:ListBucket
            Resource: !GetAtt ContentBucket.Arn
  {% endif %}

  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: status_code
          AttributeType: S
        - AttributeName: request_time
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user_id
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: request_time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: status_code
          KeySchema:
            - AttributeName: status_code
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: subscription_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: creation_date
          AttributeType: S
      KeySchema:
        - AttributeName: subscription_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user_id
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: creation_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub "${AWS::StackName} Earthdata Login credentials"
      SecretString: !Sub '{"username": "${EDLUsername}", "password": "${EDLPassword}"}'
