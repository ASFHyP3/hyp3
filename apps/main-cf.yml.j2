AWSTemplateFormatVersion: 2010-09-09

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  SecretArn:
    Description: ARN of Secret in AWS Secrets Manager containing all the credentials needed for job tasks.
    Type: String

  ImageTag:
    Type: String
    Default: latest

  ProductLifetimeInDays:
    Description: Number of days to keep output files before deleting them.
    Type: Number
    MinValue: 1
    Default: 14

  AuthPublicKey:
    Description: Public key for jwt auth provider
    Type: String

  AuthAlgorithm:
    Description: Algorithm for jwt auth provider, if using https://auth.asf.alaska.edu then keep default.
    Type: String
    Default: RS256

  DefaultCreditsPerUser:
    Description: The default number of credits given to a new user.
    Type: Number
    MinValue: 0

  DefaultApplicationStatus:
    Description: The default status for new user applications.
    Type: String
    AllowedValues:
      - NOT_STARTED
      - APPROVED

  SystemAvailable:
    Description: Set to false to shutdown system, API will run and provide errors to users, but will not accept jobs.
    Type: String
    Default: true
    AllowedValues:
      - false
      - true

  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

  DefaultMaxvCpus:
    Description: Default maximum size for the AWS Batch compute environment
    Type: Number
    MinValue: 0
    Default: 60

  ExpandedMaxvCpus:
    Description: Expanded maximum size for the AWS Batch compute environment to use when month-to-date budget sufficiently exceeds month-to-date spending
    Type: Number
    MinValue: 0
    Default: 60

  MonthlyBudget:
    Description: Total budget allocated per month, in dollars. Ignored when DefaultMaxvCpus = ExpandedMaxvCpus.
    Type: Number
    MinValue: 0
    Default: 0

  RequiredSurplus:
    Description: Amount by which month-to-date budget must exceed month-to-date spending to increase fleet size, in dollars. Ignored when DefaultMaxvCpus = ExpandedMaxvCpus.
    Type: Number
    MinValue: 0
    Default: 0

  InstanceTypes:
    Description: EC2 instance types to include in AWS Batch Compute Environment
    Type: CommaDelimitedList
    Default: r6id.xlarge

  {% if security_environment != 'EDC' %}
  DomainName:
    Description: DNS domain name that will be used to invoke this api.
    Type: String

  CertificateArn:
    Description: ARN of Certificate in AWS Certificate Manager setup previously for this domain name.
    Type: String

  {% else %}
  OriginAccessIdentityId:
    Description: ID of the CloudFront Origin Access Identity used to access data in S3 for Earthdata Cloud deployments
    Type: String

  DistributionUrl:
    Type: String
    Description: CloudFront Distribution URL for Earthdata Cloud environments
  {% endif %}

Conditions:

  ScaleCluster: !Not [!Equals [!Ref DefaultMaxvCpus, !Ref ExpandedMaxvCpus]]

Outputs:

  ApiUrl:
    Value: !GetAtt Api.Outputs.Url

Resources:

  Api:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobsTable: !Ref JobsTable
        UsersTable: !Ref UsersTable
        AccessCodesTable: !Ref AccessCodesTable
        AuthPublicKey: !Ref AuthPublicKey
        AuthAlgorithm: !Ref AuthAlgorithm
        DefaultCreditsPerUser: !Ref DefaultCreditsPerUser
        DefaultApplicationStatus: !Ref DefaultApplicationStatus
        SystemAvailable: !Ref SystemAvailable
        {% if security_environment == 'EDC' %}
        VpcId: !Ref VpcId
        SecurityGroupId: !GetAtt Cluster.Outputs.SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% else %}
        DomainName: !Ref DomainName
        CertificateArn: !Ref CertificateArn
        {% endif %}
      TemplateURL: api/api-cf.yml

  Cluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !Ref VpcId
        SubnetIds: !Join [",", !Ref SubnetIds]
        MaxvCpus: !Ref DefaultMaxvCpus
        AmiId: !Ref AmiId
        ContentBucket: !Ref ContentBucket
        InstanceTypes: !Join [",", !Ref InstanceTypes]
      TemplateURL: compute-cf.yml

  ScaleCluster:
    Type: AWS::CloudFormation::Stack
    Condition: ScaleCluster
    Properties:
      Parameters:
        ComputeEnvironmentArn: !GetAtt Cluster.Outputs.ComputeEnvironmentArn
        {% for job_type, job_spec in job_types.items() if 'Default' != job_spec['compute_environment']['name'] %}
        {% set name = job_spec['compute_environment']['name'] %}
        {{ name }}ComputeEnvironmentArn: !GetAtt Cluster.Outputs.{{ name }}ComputeEnvironmentArn
        {% endfor %}
        DefaultMaxvCpus: !Ref DefaultMaxvCpus
        ExpandedMaxvCpus: !Ref ExpandedMaxvCpus
        MonthlyBudget: !Ref MonthlyBudget
        RequiredSurplus: !Ref RequiredSurplus
        {% if security_environment == 'EDC' %}
        SecurityGroupId: !GetAtt Cluster.Outputs.SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% endif %}
      TemplateURL: scale-cluster/scale-cluster-cf.yml

  HandleBatchEvent:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobQueueArn: !GetAtt Cluster.Outputs.JobQueueArn
        {% for job_type, job_spec in job_types.items() if 'Default' != job_spec['compute_environment']['name'] %}
        {% set name = job_spec['compute_environment']['name'] %}
        {{ name }}JobQueueArn: !GetAtt Cluster.Outputs.{{ name }}JobQueueArn
        {% endfor %}
        JobsTable: !Ref JobsTable
        {% if security_environment == 'EDC' %}
        SecurityGroupId: !GetAtt Cluster.Outputs.SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% endif %}
      TemplateURL: handle-batch-event/handle-batch-event-cf.yml

  StepFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobQueueArn: !GetAtt Cluster.Outputs.JobQueueArn
        {% for job_type, job_spec in job_types.items() if 'Default' != job_spec['compute_environment']['name'] %}
        {% set name = job_spec['compute_environment']['name'] %}
        {{ name }}JobQueueArn: !GetAtt Cluster.Outputs.{{ name }}JobQueueArn
        {% endfor %}
        TaskRoleArn: !GetAtt Cluster.Outputs.TaskRoleArn
        JobsTable: !Ref JobsTable
        Bucket: !Ref ContentBucket
        ImageTag: !Ref ImageTag
        SecretArn: !Ref SecretArn
        {% if security_environment == 'EDC' %}
        SecurityGroupId: !GetAtt Cluster.Outputs.SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        DistributionUrl: !Ref DistributionUrl
        {% endif %}
      TemplateURL: workflow-cf.yml

  Monitoring:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StepFunctionArn: !GetAtt StepFunction.Outputs.StepFunctionArn
      TemplateURL: monitoring-cf.yml

  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        IgnorePublicAcls: True
        BlockPublicPolicy: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      {% if security_environment == 'EDC' %}
      Tags:
        - Key: DAR
          Value: "YES"
      {% endif %}

  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "${LogBucket.Arn}/*"
            Condition:
              ArnLike:
                "aws:SourceArn": !GetAtt ContentBucket.Arn
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId

  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: s3-access-logs/content-bucket/
      MetricsConfigurations:
        - Id: EntireBucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        IgnorePublicAcls: True
        BlockPublicPolicy: {{ 'True' if security_environment in ('EDC', 'JPL') else 'False' }}
        RestrictPublicBuckets: {{ 'True' if security_environment in ('EDC', 'JPL') else 'False' }}
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            TagFilters:
              - Key: file_type
                Value: product
            ExpirationInDays: !Ref ProductLifetimeInDays
          - Status: Enabled
            TagFilters:
              - Key: file_type
                Value: log
            ExpirationInDays: !Ref ProductLifetimeInDays
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - "*.asf.alaska.edu"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      {% if security_environment == 'EDC' %}
      Tags:
        - Key: DAR
          Value: "NO"
      {% endif %}

  {% if security_environment != 'JPL' %}
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ContentBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            {% if security_environment == 'EDC' %}
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentityId}"
            {% else %}
            Principal: "*"
            {% endif %}
            Action:
              - s3:GetObject
              - s3:GetObjectTagging
            Resource: !Sub "${ContentBucket.Arn}/*"
          - Effect: Allow
            {% if security_environment == 'EDC' %}
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentityId}"
            {% else %}
            Principal: "*"
            {% endif %}
            Action: s3:ListBucket
            Resource: !GetAtt ContentBucket.Arn
  {% endif %}

  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: status_code
          AttributeType: S
        - AttributeName: request_time
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user_id
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: request_time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: status_code
          KeySchema:
            - AttributeName: status_code
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  AccessCodesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: access_code
          AttributeType: S
      KeySchema:
        - AttributeName: access_code
          KeyType: HASH

  {% if security_environment == 'EDC' %}
  DisablePrivateDNS:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !Ref VpcId
        SecurityGroupId: !GetAtt Cluster.Outputs.SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
      TemplateURL: disable-private-dns/disable-private-dns-cf.yml
  {% endif %}
