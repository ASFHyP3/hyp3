AWSTemplateFormatVersion: 2010-09-09

Parameters:

  JobQueueArn:
    Type: String

  {% for name in compute_env_names %}
  {{ name }}JobQueueArn:
    Type: String
  {% endfor %}

  JobsTable:
    Type: String

  Bucket:
    Type: String

  ImageTag:
    Type: String

  TaskRoleArn:
    Type: String

  SecretArn:
    Type: String

  {% if security_environment == 'EDC' %}
  SecurityGroupId:
    Type: String

  SubnetIds:
    Type: CommaDelimitedList

  DistributionUrl:
    Type: String
  {% endif %}

Outputs:

  StepFunctionArn:
    Value: !Ref StepFunction


Resources:
  {% for job_type, job_spec in job_types.items() %}
  {% for job_step in job_spec['steps'] %}
  {{ snake_to_pascal_case(job_step['name']) }}:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Image: {% if 'image_tag' in job_step -%}
            "{{ job_step['image'] }}:{{ job_step['image_tag'] }}"
          {% else -%}
            !Sub "{{ job_step['image'] }}:${ImageTag}"
          {% endif %}
        JobRoleArn: !Ref TaskRoleArn
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        ResourceRequirements:
          - Type: VCPU
            Value: "{{ job_step['vcpu'] }}"
          - Type: MEMORY
            Value: "{{ job_step['memory'] }}"
          {% if 'gpu' in job_step %}
          - Type: GPU
            Value: "{{ job_step['gpu'] }}"
          {% endif %}
        Command:
          {% for command in job_step['command'] %}
          - {{ command }}
          {% endfor %}
        {% if job_step.get('secrets') %}
        Secrets:
          {% for secret in job_step['secrets'] %}
          - Name: {{ secret }}
            ValueFrom: !Sub "${SecretArn}:{{ secret }}::"
          {% endfor %}
        {% endif %}
      Timeout:
        AttemptDurationSeconds: {{ job_step['timeout'] }}
  {% endfor %}
  {% endfor %}

  StepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionS3Location: step-function.json
      DefinitionSubstitutions:
        JobQueueArn: !Ref JobQueueArn
        {% for name in compute_env_names %}
        {{ name }}JobQueueArn: !Ref {{ name }}JobQueueArn
        {% endfor %}
        {% for job_type, job_spec in job_types.items() %}
        {% for job_step in job_spec['steps'] %}
        {{ snake_to_pascal_case(job_step['name']) }}: !Ref {{ snake_to_pascal_case(job_step['name']) }}
        {% endfor %}
        {% endfor %}
        UpdateDBLambdaArn: !GetAtt UpdateDB.Outputs.LambdaArn
        SetBatchOverridesLambdaArn: !GetAtt SetBatchOverrides.Outputs.LambdaArn
        GetFilesLambdaArn: !GetAtt GetFiles.Outputs.LambdaArn
        CheckProcessingTimeLambdaArn: !GetAtt CheckProcessingTime.Outputs.LambdaArn
        UploadLogLambdaArn: !GetAtt UploadLog.Outputs.LambdaArn

  StepFunctionRole:
    Type: {{ 'Custom::JplRole' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::Role' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: states.amazonaws.com
          Effect: Allow
      ManagedPolicyArns:
        - !Ref StepFunctionPolicy

  StepFunctionPolicy:
    Type: {{ 'Custom::JplPolicy' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::ManagedPolicy' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplPolicy::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: batch:SubmitJob
            Resource:
              - !Ref JobQueueArn
              {% for name in compute_env_names %}
              - !Ref {{ name }}JobQueueArn
              {% endfor %}
              {% for job_type, job_spec in job_types.items() %}
              {% for job_step in job_spec['steps'] %}
              - !Ref {{ snake_to_pascal_case(job_step['name']) }}
              {% endfor %}
              {% endfor %}
          - Effect: Allow
            Action: batch:DescribeJobs
            Resource: "*"
          - Effect: Allow
            Action: batch:TerminateJob
            Resource: !Sub "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job/*"
          - Effect: Allow
            Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
             - !GetAtt UpdateDB.Outputs.LambdaArn
             - !GetAtt SetBatchOverrides.Outputs.LambdaArn
             - !GetAtt GetFiles.Outputs.LambdaArn
             - !GetAtt CheckProcessingTime.Outputs.LambdaArn
             - !GetAtt UploadLog.Outputs.LambdaArn

  UpdateDB:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobsTable: !Ref JobsTable
        {% if security_environment == 'EDC' %}
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% endif %}
      TemplateURL: update-db/update-db-cf.yml

  SetBatchOverrides:
    Type: AWS::CloudFormation::Stack
    Properties:
      {% if security_environment == 'EDC' %}
      Parameters:
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
      {% endif %}
      TemplateURL: set-batch-overrides/set-batch-overrides-cf.yml

  GetFiles:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Bucket: !Ref Bucket
        {% if security_environment == 'EDC' %}
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        DistributionUrl: !Ref DistributionUrl
        {% endif %}
      TemplateURL: get-files/get-files-cf.yml

  CheckProcessingTime:
    Type: AWS::CloudFormation::Stack
    Properties:
      {% if security_environment == 'EDC' %}
      Parameters:
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
      {% endif %}
      TemplateURL: check-processing-time/check-processing-time-cf.yml

  StartExecutionManager:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobsTable: !Ref JobsTable
        StartExecutionWorkerArn: !GetAtt StartExecutionWorker.Outputs.LambdaArn
        {% if security_environment == 'EDC' %}
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% endif %}
      TemplateURL: start-execution-manager/start-execution-manager-cf.yml

  StartExecutionWorker:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StepFunctionArn: !Ref StepFunction
        {% if security_environment == 'EDC' %}
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% endif %}
      TemplateURL: start-execution-worker/start-execution-worker-cf.yml

  UploadLog:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Bucket: !Ref Bucket
        {% if security_environment == 'EDC' %}
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
        {% endif %}
      TemplateURL: upload-log/upload-log-cf.yml

  ExecutionRole:
    Type: {{ 'Custom::JplRole' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::Role' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: ecs-tasks.amazonaws.com
          Effect: Allow
      ManagedPolicyArns:
        - !Ref ExecutionPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ExecutionPolicy:
    Type: {{ 'Custom::JplPolicy' if security_environment in ('JPL', 'JPL-public') else 'AWS::IAM::ManagedPolicy' }}
    Properties:
      {% if security_environment in ('JPL', 'JPL-public') %}
      ServiceToken: !ImportValue Custom::JplPolicy::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Ref SecretArn
