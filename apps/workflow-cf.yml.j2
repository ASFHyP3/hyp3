AWSTemplateFormatVersion: 2010-09-09

Parameters:

  JobQueueArn:
    Type: String

  JobsTable:
    Type: String

  Bucket:
    Type: String

  ImageTag:
    Type: String

  TaskRoleArn:
    Type: String

  PermissionsBoundaryPolicyArn:
    Type: String

  SecurityGroupId:
    Type: String

  SubnetIds:
    Type: CommaDelimitedList

  SecretArn:
    Type: String

Conditions:

  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundaryPolicyArn, ""]]

Outputs:

  StepFunctionArn:
    Value: !Ref StepFunction

Resources:
  {% for job_type, job_spec in  job_types.items() %}
  {{ snake_to_pascal_case(job_type) }}:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      Parameters:
        {% for k, v in job_spec['parameters'].items() %}
        {{ k }}: {{ v.get('default') or v['api_schema'].get('default') }}
        {% endfor %}
      ContainerProperties:
        Image: {% if 'image_tag' in job_spec -%}
            "{{ job_spec['image'] }}:{{ job_spec['image_tag'] }}"
          {% else -%}
            !Sub "{{ job_spec['image'] }}:${ImageTag}"
          {% endif %}
        JobRoleArn: !Ref TaskRoleArn
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        ResourceRequirements:
          - Type: VCPU
            Value: "1"
          - Type: MEMORY
            Value: "126000"
        Command:
          {% for command in job_spec['command'] %}
          - {{ command }}
          {% endfor %}
        Secrets:
          - Name: EARTHDATA_USERNAME
            ValueFrom: !Sub "${SecretArn}:username::"
          - Name: EARTHDATA_PASSWORD
            ValueFrom: !Sub "${SecretArn}:password::"
      Timeout:
        AttemptDurationSeconds: {{ job_spec['timeout'] }}
  {% endfor %}

  StepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionS3Location: step-function.json
      DefinitionSubstitutions:
        JobQueueArn: !Ref JobQueueArn
        {% for job_type in job_types %}
        {{ snake_to_pascal_case(job_type) }}: !Ref {{ snake_to_pascal_case(job_type) }}
        {% endfor %}
        UpdateDBLambdaArn: !GetAtt UpdateDB.Outputs.LambdaArn
        GetFilesLambdaArn: !GetAtt GetFiles.Outputs.LambdaArn
        UploadLogLambdaArn: !GetAtt UploadLog.Outputs.LambdaArn

  StepFunctionRole:
    Type: {{ 'Custom::JplRole' if security_environment == 'JPL' else 'AWS::IAM::Role' }}
    Properties:
      {% if security_environment == 'JPL' %}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: states.amazonaws.com
          Effect: Allow
      PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundaryPolicyArn, !Ref AWS::NoValue]
      ManagedPolicyArns:
        - !Ref StepFunctionPolicy

  StepFunctionPolicy:
    Type: {{ 'Custom::JplPolicy' if security_environment == 'JPL' else 'AWS::IAM::ManagedPolicy' }}
    Properties:
      {% if security_environment == 'JPL' %}
      ServiceToken: !ImportValue Custom::JplPolicy::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: batch:SubmitJob
            Resource:
              - !Ref JobQueueArn
              {% for job_type in job_types %}
              - !Ref {{ snake_to_pascal_case(job_type) }}
              {% endfor %}
          - Effect: Allow
            Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
             - !GetAtt UpdateDB.Outputs.LambdaArn
             - !GetAtt GetFiles.Outputs.LambdaArn
             - !GetAtt UploadLog.Outputs.LambdaArn

  UpdateDB:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobsTable: !Ref JobsTable
        PermissionsBoundaryPolicyArn: !Ref PermissionsBoundaryPolicyArn
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
      TemplateURL: update-db/update-db-cf.yml

  GetFiles:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Bucket: !Ref Bucket
        PermissionsBoundaryPolicyArn: !Ref PermissionsBoundaryPolicyArn
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
      TemplateURL: get-files/get-files-cf.yml

  StartExecution:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        JobsTable: !Ref JobsTable
        StepFunctionArn: !Ref StepFunction
        PermissionsBoundaryPolicyArn: !Ref PermissionsBoundaryPolicyArn
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
      TemplateURL: start-execution/start-execution-cf.yml

  UploadLog:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Bucket: !Ref Bucket
        PermissionsBoundaryPolicyArn: !Ref PermissionsBoundaryPolicyArn
        SecurityGroupId: !Ref SecurityGroupId
        SubnetIds: !Join [",", !Ref SubnetIds]
      TemplateURL: upload-log/upload-log-cf.yml

  ExecutionRole:
    Type: {{ 'Custom::JplRole' if security_environment == 'JPL' else 'AWS::IAM::Role' }}
    Properties:
      {% if security_environment == 'JPL' %}
      ServiceToken: !ImportValue Custom::JplRole::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: ecs-tasks.amazonaws.com
          Effect: Allow
      PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundaryPolicyArn, !Ref AWS::NoValue]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - !Ref ExecutionPolicy

  ExecutionPolicy:
    Type: {{ 'Custom::JplPolicy' if security_environment == 'JPL' else 'AWS::IAM::ManagedPolicy' }}
    Properties:
      {% if security_environment == 'JPL' %}
      ServiceToken: !ImportValue Custom::JplPolicy::ServiceToken
      Path: /account-managed/hyp3/
      {% endif %}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Ref SecretArn
