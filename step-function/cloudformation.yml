AWSTemplateFormatVersion: 2010-09-09

Parameters:

  JobQueueArn:
    Type: String

  RtcGammaJobDefinition:
    Type: String

  JobsTable:
    Type: String

Outputs:

  StepFunctionArn:
    Value: !Ref StepFunction

Resources:

  StepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "JOB_RUNNING",
          "States": {
            "JOB_RUNNING": {
              "Type": "Task",
              "Resource": "${Lambda.Arn}",
              "Parameters": {
                "job_id.$": "$.job_id",
                "job_type.$": "$.job_type",
                "user_id.$": "$.user_id",
                "status_code": "RUNNING",
                "job_parameters.$": "$.job_parameters",
                "start_time.$": "$$.Execution.StartTime",
                "description.$": "$.description"
              },
              "ResultPath": null,
              "Next": "ADD_PREFIX_TO_PARAMETERS"
            },
            "ADD_PREFIX_TO_JOB_PARAMETERS": {
              "Type": "Pass",
              "InputPath": "$.job_id"
              "ResultPath": "$.job_parameters.bucket-prefix",
              "Next": "RTC_GAMMA"
            },
            "RTC_GAMMA": {
              "Type": "Task",
              "Resource": "arn:aws:states:::batch:submitJob.sync",
              "Parameters": {
                "JobDefinition": "${RtcGammaJobDefinition}",
                "JobName.$": "$.job_id",
                "JobQueue": "${JobQueueArn}",
                "Parameters.$": "$.job_parameters"
              },
              "Next": "JOB_SUCCEEDED",
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "JOB_FAILED"
              }]
            },
            "JOB_SUCCEEDED": {
              "Type": "Task",
              "Resource": "${Lambda.Arn}",
              "Parameters": {
                "job_id.$": "$.job_id",
                "status_code": "SUCCEEDED"
              },
              "End": true
            },
            "JOB_FAILED": {
              "Type": "Task",
              "Resource": "${Lambda.Arn}",
              "Parameters": {
                "job_id.$": "$.job_id",
                "status_code": "FAILED"
              },
              "End": true
            }
          }
        }

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: states.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: batch:SubmitJob
                Resource:
                  - !Ref JobQueueArn
                  - !Ref RtcGammaJobDefinition
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Lambda.Arn

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action: dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${JobsTable}*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref JobsTable
      Code: src/
      Handler: main.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 30
